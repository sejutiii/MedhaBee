// Recorder.js (minified, MIT License)
// https://github.com/mattdiamond/Recorderjs
(function(window){var WORKER_PATH='recorderWorker.js';var Recorder=function(source,config){var config=config||{};var bufferLen=config.bufferLen||4096;this.context=source.context;this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,bufferLen,2,2);var worker=new Worker(config.workerPath||WORKER_PATH);worker.postMessage({command:'init',config:{sampleRate:this.context.sampleRate}});var recording=false, currCallback;this.node.onaudioprocess=function(e){if(!recording)return;worker.postMessage({command:'record',buffer:[e.inputBuffer.getChannelData(0),e.inputBuffer.getChannelData(1)]});};this.record=function(){recording=true;};this.stop=function(){recording=false;};this.clear=function(){worker.postMessage({command:'clear'});};this.getBuffer=function(cb){currCallback=cb||config.callback;worker.postMessage({command:'getBuffer'});};this.exportWAV=function(cb,type){currCallback=cb||config.callback;type=type||'audio/wav';if(!currCallback)throw new Error('Callback not set');worker.postMessage({command:'exportWAV',type:type});};worker.onmessage=function(e){var data=e.data;var cb=currCallback;currCallback=null;if(typeof cb==='function'){cb(data);}};source.connect(this.node);this.node.connect(this.context.destination);};Recorder.setupDownload=function(blob,filename){var url=(window.URL||window.webkitURL).createObjectURL(blob);var link=document.createElement('a');link.href=url;link.download=filename||'output.wav';var click=new MouseEvent('click');link.dispatchEvent(click);};window.Recorder=Recorder;})(window);
